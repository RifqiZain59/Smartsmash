import 'package:get/get.dart';
import 'package:smartsmashapp/app/data/service/api_service.dart';
// import 'package:flutter/material.dart'; // Tidak lagi diperlukan karena TextEditingController dihapus

class ForgotPasswordController extends GetxController {
  // Kontroler untuk input email
  // Tidak lagi menggunakan TextEditingController. Email akan diterima sebagai parameter.
  // final emailController = TextEditingController(); // Dihapus

  // RxBool untuk mengontrol visibilitas bidang OTP dan kata sandi baru
  // RxBool juga bisa dideklarasikan sebagai final karena objeknya sendiri tidak akan diganti
  final RxBool showOtpAndNewPasswordFields = false.obs;

  // Fungsi untuk mengirim OTP ke email
  // Sekarang menerima email sebagai parameter
  void sendOtp({required String email}) async {
    // Perubahan di sini
    if (email.isEmpty || !GetUtils.isEmail(email)) {
      // Perubahan di sini
      Get.snackbar('Error', 'Masukkan alamat email yang valid.');
      return;
    }

    // Panggil API untuk mengirim OTP
    final response = await ApiService.requestPasswordResetOtp(
      email: email, // Perubahan di sini
    );

    if (response['success']) {
      Get.snackbar(
        'Sukses',
        response['message'] ?? 'Kode OTP telah dikirim ke email Anda.',
        snackPosition: SnackPosition.BOTTOM,
      );
      showOtpAndNewPasswordFields.value = true; // Tampilkan bidang OTP
    } else {
      Get.snackbar(
        'Error',
        response['message'] ?? 'Gagal mengirim OTP. Silakan coba lagi.',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
    print('Permintaan OTP dikirim untuk: $email'); // Perubahan di sini
  }

  // Fungsi untuk memverifikasi OTP dan mengatur ulang kata sandi
  // Menerima nilai OTP, kata sandi baru, dan konfirmasi langsung sebagai parameter
  void verifyOtpAndResetPassword({
    required String email, // Email juga diterima sebagai parameter sekarang
    required String otp,
    required String newPassword,
    required String confirmNewPassword,
  }) async {
    if (email.isEmpty ||
        otp.isEmpty ||
        newPassword.isEmpty ||
        confirmNewPassword.isEmpty) {
      // Perubahan di sini
      Get.snackbar('Error', 'Semua bidang harus diisi.');
      return;
    }

    // Perhatikan: Sesuaikan panjang minimal password dengan backend Anda (minimal 6 karakter)
    if (newPassword.length < 6) {
      Get.snackbar('Error', 'Kata sandi baru harus minimal 6 karakter.');
      return;
    }

    if (newPassword != confirmNewPassword) {
      Get.snackbar('Error', 'Konfirmasi kata sandi tidak cocok.');
      return;
    }

    // Panggil API untuk mereset kata sandi
    final response = await ApiService.resetPassword(
      email: email, // Perubahan di sini
      otp: otp,
      newPassword: newPassword,
      confirmNewPassword: confirmNewPassword,
    );

    if (response['success']) {
      Get.snackbar(
        'Sukses',
        response['message'] ?? 'Kata sandi Anda berhasil direset!',
        snackPosition: SnackPosition.BOTTOM,
      );
      print('Kata sandi direset untuk: $email'); // Perubahan di sini
      // Setelah berhasil mereset, Anda mungkin ingin mengarahkan pengguna ke halaman login
      Get.offAllNamed('/login'); // Contoh: Arahkan ke halaman login
    } else {
      Get.snackbar(
        'Error',
        response['message'] ?? 'Gagal mereset kata sandi. Silakan coba lagi.',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }

  @override
  void onClose() {
    // emailController.dispose(); // Dihapus karena emailController tidak lagi ada
    super.onClose();
  }
}
